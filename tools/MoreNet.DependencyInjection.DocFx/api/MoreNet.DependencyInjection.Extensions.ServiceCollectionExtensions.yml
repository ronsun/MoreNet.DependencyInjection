### YamlMime:ManagedReference
items:
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  commentId: T:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: MoreNet.DependencyInjection.Extensions
  children:
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: ServiceCollectionExtensions
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 10
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nExtension methods for <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class ServiceCollectionExtensions
    content.vb: Public Module ServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddNamedSingleton<TService>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddNamedSingleton<TService>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: AddNamedSingleton
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 18
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds a named singleton service of the types specified in <xref href=\"MoreNet.DependencyInjection.INamedServiceContainer%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddNamedSingleton<TService>(this IServiceCollection services)
          where TService : INameable
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Services.
    typeParameters:
    - id: TService
      description: Service Type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddNamedSingleton(Of TService As INameable)(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton*
  nameWithType.vb: ServiceCollectionExtensions.AddNamedSingleton(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddNamedSingleton(Of TService)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddNamedScoped<TService>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddNamedScoped<TService>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: AddNamedScoped
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 31
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds a named scoped service of the types specified in <xref href=\"MoreNet.DependencyInjection.INamedServiceContainer%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddNamedScoped<TService>(this IServiceCollection services)
          where TService : INameable
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Services.
    typeParameters:
    - id: TService
      description: Service Type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddNamedScoped(Of TService As INameable)(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped*
  nameWithType.vb: ServiceCollectionExtensions.AddNamedScoped(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddNamedScoped(Of TService)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddNamedTransient<TService>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddNamedTransient<TService>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: AddNamedTransient
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 44
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds a named transient service of the types specified in <xref href=\"MoreNet.DependencyInjection.INamedServiceContainer%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddNamedTransient<TService>(this IServiceCollection services)
          where TService : INameable
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Services.
    typeParameters:
    - id: TService
      description: Service Type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddNamedTransient(Of TService As INameable)(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient*
  nameWithType.vb: ServiceCollectionExtensions.AddNamedTransient(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddNamedTransient(Of TService)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddNamedSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: TryAddNamedSingleton<TService>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.TryAddNamedSingleton<TService>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: TryAddNamedSingleton
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 58
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds the specified <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TService</code> as a <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton\" data-throw-if-not-resolved=\"false\"></xref>\nif the service type hasn&apos;t already been registered.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection TryAddNamedSingleton<TService>(this IServiceCollection services)
          where TService : INameable
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Services.
    typeParameters:
    - id: TService
      description: Service Type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryAddNamedSingleton(Of TService As INameable)(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton*
  nameWithType.vb: ServiceCollectionExtensions.TryAddNamedSingleton(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddNamedSingleton(Of TService)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddNamedScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: TryAddNamedScoped<TService>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.TryAddNamedScoped<TService>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: TryAddNamedScoped
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 72
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds the specified <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TService</code> as a <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped\" data-throw-if-not-resolved=\"false\"></xref>\nif the service type hasn&apos;t already been registered.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection TryAddNamedScoped<TService>(this IServiceCollection services)
          where TService : INameable
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Services.
    typeParameters:
    - id: TService
      description: Service Type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryAddNamedScoped(Of TService As INameable)(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped*
  nameWithType.vb: ServiceCollectionExtensions.TryAddNamedScoped(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddNamedScoped(Of TService)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddNamedTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: TryAddNamedTransient<TService>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.TryAddNamedTransient<TService>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: TryAddNamedTransient
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 86
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds the specified <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TService</code> as a <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient\" data-throw-if-not-resolved=\"false\"></xref>\nif the service type hasn&apos;t already been registered.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection TryAddNamedTransient<TService>(this IServiceCollection services)
          where TService : INameable
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Services.
    typeParameters:
    - id: TService
      description: Service Type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryAddNamedTransient(Of TService As INameable)(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient*
  nameWithType.vb: ServiceCollectionExtensions.TryAddNamedTransient(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddNamedTransient(Of TService)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddSingletonEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingletonEnumerable<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.TryAddSingletonEnumerable<TService, TImplementation>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: TryAddSingletonEnumerable
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 101
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds singleton service if an existing service <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TService</code>\nand an implementation that does not already exist in services.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection TryAddSingletonEnumerable<TService, TImplementation>(this IServiceCollection services)
          where TService : class where TImplementation : class, TService
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Service collection.
    typeParameters:
    - id: TService
      description: Service type.
    - id: TImplementation
      description: Implementation type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryAddSingletonEnumerable(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable*
  nameWithType.vb: ServiceCollectionExtensions.TryAddSingletonEnumerable(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddSingletonEnumerable(Of TService, TImplementation)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddScopedEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: TryAddScopedEnumerable<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.TryAddScopedEnumerable<TService, TImplementation>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: TryAddScopedEnumerable
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 118
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds scoped service if an existing service <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TService</code>\nand an implementation that does not already exist in services.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection TryAddScopedEnumerable<TService, TImplementation>(this IServiceCollection services)
          where TService : class where TImplementation : class, TService
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Service collection.
    typeParameters:
    - id: TService
      description: Service type.
    - id: TImplementation
      description: Implementation type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryAddScopedEnumerable(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable*
  nameWithType.vb: ServiceCollectionExtensions.TryAddScopedEnumerable(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddScopedEnumerable(Of TService, TImplementation)(IServiceCollection)
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddTransientEnumerable``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransientEnumerable<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.TryAddTransientEnumerable<TService, TImplementation>(IServiceCollection)
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
      branch: master
      repo: https://github.com/ronsun/MoreNet.DependencyInjection.git
    id: TryAddTransientEnumerable
    path: ../../src/MoreNet.DependencyInjection/Extensions/ServiceCollectionExtensions.cs
    startLine: 135
  assemblies:
  - MoreNet.DependencyInjection
  namespace: MoreNet.DependencyInjection.Extensions
  summary: "\nAdds transient service if an existing service <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TService</code>\nand an implementation that does not already exist in services.\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection TryAddTransientEnumerable<TService, TImplementation>(this IServiceCollection services)
          where TService : class where TImplementation : class, TService
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Service collection.
    typeParameters:
    - id: TService
      description: Service type.
    - id: TImplementation
      description: Implementation type.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: Current <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryAddTransientEnumerable(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
  overload: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable*
  nameWithType.vb: ServiceCollectionExtensions.TryAddTransientEnumerable(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddTransientEnumerable(Of TService, TImplementation)(IServiceCollection)
references:
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: MoreNet.DependencyInjection.Extensions
  commentId: N:MoreNet.DependencyInjection.Extensions
  name: MoreNet.DependencyInjection.Extensions
  nameWithType: MoreNet.DependencyInjection.Extensions
  fullName: MoreNet.DependencyInjection.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MoreNet.DependencyInjection.INamedServiceContainer`1
  commentId: T:MoreNet.DependencyInjection.INamedServiceContainer`1
  name: INamedServiceContainer<TService>
  nameWithType: INamedServiceContainer<TService>
  fullName: MoreNet.DependencyInjection.INamedServiceContainer<TService>
  nameWithType.vb: INamedServiceContainer(Of TService)
  fullName.vb: MoreNet.DependencyInjection.INamedServiceContainer(Of TService)
  name.vb: INamedServiceContainer(Of TService)
  spec.csharp:
  - uid: MoreNet.DependencyInjection.INamedServiceContainer`1
    name: INamedServiceContainer
    nameWithType: INamedServiceContainer
    fullName: MoreNet.DependencyInjection.INamedServiceContainer
  - name: <
    nameWithType: <
    fullName: <
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MoreNet.DependencyInjection.INamedServiceContainer`1
    name: INamedServiceContainer
    nameWithType: INamedServiceContainer
    fullName: MoreNet.DependencyInjection.INamedServiceContainer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: )
    nameWithType: )
    fullName: )
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton
  name: AddNamedSingleton
  nameWithType: ServiceCollectionExtensions.AddNamedSingleton
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedSingleton
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped
  name: AddNamedScoped
  nameWithType: ServiceCollectionExtensions.AddNamedScoped
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedScoped
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient
  name: AddNamedTransient
  nameWithType: ServiceCollectionExtensions.AddNamedTransient
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.AddNamedTransient
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  isExternal: true
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton
  name: TryAddNamedSingleton
  nameWithType: ServiceCollectionExtensions.TryAddNamedSingleton
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedSingleton
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  isExternal: true
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped
  name: TryAddNamedScoped
  nameWithType: ServiceCollectionExtensions.TryAddNamedScoped
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedScoped
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  isExternal: true
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient
  name: TryAddNamedTransient
  nameWithType: ServiceCollectionExtensions.TryAddNamedTransient
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddNamedTransient
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable
  name: TryAddSingletonEnumerable
  nameWithType: ServiceCollectionExtensions.TryAddSingletonEnumerable
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddSingletonEnumerable
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable
  name: TryAddScopedEnumerable
  nameWithType: ServiceCollectionExtensions.TryAddScopedEnumerable
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddScopedEnumerable
- uid: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable*
  commentId: Overload:MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable
  name: TryAddTransientEnumerable
  nameWithType: ServiceCollectionExtensions.TryAddTransientEnumerable
  fullName: MoreNet.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddTransientEnumerable
